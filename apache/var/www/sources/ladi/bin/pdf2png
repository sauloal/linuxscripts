#!/usr/local/bin/perl

=pod

=head1 NAME

pdf2png - batch convert pages in PDF documents to PNG

=head1 SYNOPSIS

  pdf2png -conf etc/pdf2png.conf

  pdf2png -width 150 -numpages 3 -docdir /path/to/pdfs -imgdir /path/to/output/images [-overwrite]

=head1 DESCRIPTION

pdf2png will recurse through all subdirectories of -docdir and search for PDF documents (as determined by file extension). For each PDF document found, -numpages pages of the document will be processed and PNG images of each of these pages will be written to a subdirectory in -imgdir according to the scheme

  IMGDIR/FILEHASH/FILEHASH-IDX.png

where IMGDIR is the directory specified by -imgdir, FILEHASH is an MD5 digest of the PDF document and IDX is a zero-poadded, 0-indexed page number.

The image processing is performed by Image Magick. Some PDF documents cannot be processed - in this case a constructive error message generated by Image Magick is reported (see BUGS below).

=head1 HISTORY

=over

=item * 14 Jun 2005

Added POD and external configuration.

=back

=head1 BUGS

When documents that are successfully processed, pdf2png generates messages of the following kind

  ENTRY  /home/samba/public/pdf/Steve Jones PDFs/base.pdf
  DIGEST 52980b4b035ab70e29b876defec72861
  NOTICE making thumbnailes
  NOTICE found 6 pages in document
  PAGE   0
  PAGE   1
  PAGE   2
  PAGE   3
  PAGE   4

Chances are you will come across documents that Image Magick cannot process. The following are some of the error messages you can expect. 

   **** This file has a corrupted %%EOF marker, or garbage after the %%EOF.
   **** The file was produced by Acrobat Distiller 3.01 for Power Macintosh:
   **** please notify the author of this software
   **** that the file does not conform to Adobe's published PDF
   **** specification.  Processing of the file will continue normally.

   **** This file has a corrupted %%EOF marker, or garbage after the %%EOF.
   **** The file was produced by Acrobat Distiller Command 3.02b for Solaris 2.3 and later (SPARC):
   **** please notify the author of this software
   **** that the file does not conform to Adobe's published PDF
   **** specification.  Processing of the file will continue normally.

=head1 AUTHORS

Martin Krzywinski, Stephen Montgomery

LAboratory Document Indexer (LADI)
http://mkweb.bcgsc.ca/ladi
martink@bcgsc.ca

=head1 CONTACT

  Martin Krzywinski
  Genome Sciences Centre
  Vancouver BC Canada
  www.bcgsc.ca
  martink@bcgsc.ca

=cut

################################################################
#
# create png thumbnails of the first NUM_PAGES pages of 
# PDF documents
#
################################################################

use strict;
use Config::General;
use Image::Magick;
use Data::Dumper;
use File::Basename;
use Digest::MD5;
use IO::File;
use IO::Dir;
use File::Path;
use Math::VecStat qw(min);
use Getopt::Long;
use Pod::Usage;
use Storable;
use FindBin;

use lib "$FindBin::RealBin";
use lib "$FindBin::RealBin/../lib";
use lib "$FindBin::RealBin/lib";
use vars qw(%OPT %CONF);

GetOptions(\%OPT,
	   "docdir=s",
	   "numpages=i",
	   "width=i",
	   "imgdir=s",
	   "configfile=s","help","man","debug+");

pod2usage() if $OPT{help};
pod2usage(-verbose=>2) if $OPT{man};
loadconfiguration($OPT{configfile});
populateconfiguration(); # copy command line options to config hash
validateconfiguration(); 
if($CONF{debug} > 1) {
  $Data::Dumper::Pad = "debug parameters";
  $Data::Dumper::Indent = 1;
  $Data::Dumper::Quotekeys = 0;
  $Data::Dumper::Terse = 1;
  print Dumper(\%CONF);
}

###############################

if(-d $CONF{docdir}) {
scandir($CONF{docdir});
} else {
process($CONF{docdir});
}

sub scandir {
  my $dir = shift;
  my $dirio = IO::Dir->new($dir);
  while(my $item = readdir($dirio)) {
    next if $item eq "." || $item eq "..";
    my $fullpath = "$dir/$item";
    if(-d $fullpath) {
      scandir($fullpath);
    } else {
      process($fullpath);
      printinfo();
    }
  }
}

sub process {
  my $entry = shift;
  if(! -d $entry && $entry =~ /pdf$/i) {
    my $digest = md5sum($entry);
    printinfo("ENTRY  $entry");
    printinfo("DIGEST $digest");
    thumbs($entry,$digest);
  }
}

sub md5sum {
  my $file = shift;
  my $digester = Digest::MD5->new();
  my $fh = IO::File->new($file);
  $digester->addfile($fh);
  my $digest = $digester->hexdigest;
  return $digest;
}

sub thumbs {
  my $file   = shift;
  my $digest = shift;
  if(-e sprintf("%s/%s/%s-%03d.png",$CONF{imgdir},$digest,$digest,0)) {
    printinfo("NOTICE thumbnails already exist");
    if($CONF{overwrite}) {
      printinfo("NOTICE overwriting images");
    } else {
      printinfo("NOTICE not overwriting - skipping to next document");
      return;
    }

  } else {
    printinfo("NOTICE making thumbnails");
  }
  mkpath("$CONF{imgdir}/$digest");
  my $image  = new Image::Magick;
  $image->Read($file);
  printinfo("NOTICE found",int(@$image),"pages in document");
  my $numpages = $CONF{numpages} eq "all" ? @$image-1 : $CONF{numpages};
  for my $i (0 .. min($numpages,int(@$image))-1) {
    printinfo("PAGE   $i");
    my $imageage = $image->[$i];
    $imageage->Resize(width=>$CONF{width},
		      height=>$imageage->Get("height")*$CONF{width}/$imageage->Get("width"),
		      blur=>0.5);
    $imageage->Write(sprintf("%s/%s/%s-%03d.png",$CONF{imgdir},$digest,$digest,$i));
  }
}

################################################################
# housekeeping
#

sub populateconfiguration {
  foreach my $key (keys %OPT) {
    $CONF{$key} = $OPT{$key};
  }
}

sub loadconfiguration {
  my $file = shift;
  my ($scriptname) = fileparse($0);
  if(-e $file && -r _) {
    # great the file exists
  } elsif (-e "/home/$ENV{LOGNAME}/.$scriptname.conf" && -r _) {
    $file = "/home/$ENV{LOGNAME}/.$scriptname.conf";
  } elsif (-e "$FindBin::RealBin/$scriptname.conf" && -r _) {
    $file = "$FindBin::RealBin/$scriptname.conf";
  } elsif (-e "$FindBin::RealBin/etc/$scriptname.conf" && -r _) {
    $file = "$FindBin::RealBin/etc/$scriptname.conf";
  } elsif (-e "$FindBin::RealBin/../etc/$scriptname.conf" && -r _) {
    $file = "$FindBin::RealBin/../etc/$scriptname.conf";
  } else {
    return undef;
  }
  $OPT{configfile} = $file;
  my $conf = new Config::General(-ConfigFile=>$file,
				 -AllowMultiOptions=>"yes",
				 -LowerCaseNames=>1,
				 -AutoTrue=>1);
  %CONF = $conf->getall;
}

sub validateconfiguration {
  $CONF{numpages} ||= 3;
  $CONF{width} ||= 150;
}

sub printinfo {
  print join(" ",@_),"\n";
}
